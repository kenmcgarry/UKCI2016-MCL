}
}
for (i in 1:length(mcg$COMPLEX)){
temp <- mcg$COMPLEX[i]
for (j in 1:length(temp[i+1])){
print(length(temp[i+1])
}
}
for (i in 1:length(mcg$COMPLEX)){
temp <- mcg$COMPLEX[i]
for (j in 1:length(temp[i+1])){
print(length(temp[i+1]))
}
}
length(mcg$COMPLEX[1])
length(mcg$COMPLEX[2])
count(mcg$COMPLEX[2])
count(mcg$COMPLEX[1])
length(mcg$COMPLEX[1])
length(mcg$COMPLEX[1])
mcg$COMPLEX[1]
mcg$COMPLEX[[1]]
length(mcg$COMPLEX[[1]])
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]]){
print(j)
}
}
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]])){
print(j)
}
}
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]])){
print(mcg$COMPLEX[[i]])
}
}
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]])){
print(mcg$COMPLEX[[1]])
}
}
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]])){
print(mcg$COMPLEX[[1]][2])
}
}
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]])){
print(mcg$COMPLEX[[i]][j])
}
}
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]])){
print(i)
print(j)
print(mcg$COMPLEX[[i]][j])
}
}
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]])){
#     print(i)
#     print(j)
#     print(mcg$COMPLEX[[i]][j])
V(g)$cluster[mcg$COMPLEX[[i]][j]] <- i
}
}
V(g)$cluster
plot(g)
mcg <- mcode(g)
library(ProNet)
library(igraph)
source(file = "E:\\Sunderland\\PROM01 - Final Dissertation\\Development\\colorCentGraph.R")
APP <- file.path('E:\\Sunderland\\PROM01 - Final Dissertation\\Development','APP.txt') %>% read.delim(na.strings='')
APP <- APP[1:10000,c("X.node1","node2")]
g <- graph.data.frame(APP, directed=FALSE)
plot(g)
mcg <- mcode(g, loops = TRUE)
mcg
mcg <- mcode(g, loops = TRUE, vwp=0.9,haircut=TRUE,fluff=TRUE,fdt=0.1)
mcg
mcg <- mcode(g, loops = TRUE, vwp=0.9,fdt=0.1)
mcg
mcg <- mcode(g, loops = TRUE, vwp=0.9)
mcg
mcg <- mcode(g, loops = TRUE, vwp=0.1)
mcg
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]])){
#     print(i)
#     print(j)
#     print(mcg$COMPLEX[[i]][j])
V(g)$cluster[mcg$COMPLEX[[i]][j]] <- i
}
}
V(g)[cluster == 0]$color <- "red"
V(g)[cluster == 1]$color <- "green"
V(g)[cluster == 2]$color <- "yellow"
V(g)[cluster == 3]$color <- "blue"
V(g)[cluster == 4]$color <- "grey"
V(g)[cluster == 5]$color <- "purple"
V(g)[cluster == 6]$color <- "orange"
V(g)[cluster == 7]$color <- "black"
plot(g)
plot(layout=layout.fruchterman.reingold,g)
V(g)[cluster == 1]$color <- "pink"
plot(layout=layout.kamada.kawai,g)
mcg <- mcode(g, loops = TRUE, vwp=0.1, haircut= TRUE)
plot(layout=layout.kamada.kawai,g)
mcg <- mcode(g, loops = TRUE, vwp=0.2, haircut= TRUE)
library(ProNet)
library(igraph)
APP <- file.path('E:\\Sunderland\\PROM01 - Final Dissertation\\Development','APP.txt') %>% read.delim(na.strings='')
APP <- APP[1:10000,c("X.node1","node2")]
g <- graph.data.frame(APP, directed=FALSE)
plot(g)
mcg <- mcode(g, loops = TRUE, vwp=0.2, haircut= TRUE)
V(g)[cluster == 0]$color <- "red"
V(g)[cluster == 1]$color <- "pink"
V(g)[cluster == 2]$color <- "yellow"
V(g)[cluster == 3]$color <- "blue"
V(g)[cluster == 4]$color <- "grey"
V(g)[cluster == 5]$color <- "purple"
V(g)[cluster == 6]$color <- "orange"
V(g)[cluster == 7]$color <- "black"
g <- graph.data.frame(APP, directed=FALSE)
APP <- APP[1:10000,c("X.node1","node2")]
g <- graph.data.frame(APP, directed=FALSE)
mcg <- mcode(g, loops = TRUE, vwp=0.2, haircut= TRUE)
V(g)[cluster == 0]$color <- "red"
V(g)[cluster == 1]$color <- "pink"
V(g)[cluster == 2]$color <- "yellow"
V(g)[cluster == 3]$color <- "blue"
V(g)[cluster == 4]$color <- "grey"
V(g)[cluster == 5]$color <- "purple"
V(g)[cluster == 6]$color <- "orange"
V(g)[cluster == 7]$color <- "black"
for (i in 1:length(mcg$COMPLEX)){
for (j in 1:length(mcg$COMPLEX[[i]])){
#     print(i)
#     print(j)
#     print(mcg$COMPLEX[[i]][j])
V(g)$cluster[mcg$COMPLEX[[i]][j]] <- i
}
}
V(g)[cluster == 0]$color <- "red"
V(g)[cluster == 1]$color <- "pink"
V(g)[cluster == 2]$color <- "yellow"
V(g)[cluster == 3]$color <- "blue"
V(g)[cluster == 4]$color <- "grey"
V(g)[cluster == 5]$color <- "purple"
V(g)[cluster == 6]$color <- "orange"
V(g)[cluster == 7]$color <- "black"
plot(layout=layout.kamada.kawai,g)
mcg <- mcode(g, loops = TRUE, vwp=0.3, haircut= TRUE)
plot(layout=layout.kamada.kawai,g)
install.packages("devtools")
file.edit("~/Desktop/foo/.Rprofile")
file.edit("~/.Rprofile")
.libPaths()
file.edit("\\\\uos-learner/bg67ko/Documents/R/win-library/3.2/.Rprofile")
file.edit("C:\\Program Files\\R\\R-3.2.2\\etc\\.Rprofile")
file.edit("C:\\Program Files\\R\\R-3.2\\etc\\.Rprofile")
file.edit("~/.Rprofile")
file.edit(~/.Rprofile.site)
file.edit("~/.Rprofile.site")
setwd("F:\\Sunderland\\PROM01 - Final Dissertation\\Development")
setwd("E:\\Sunderland\\PROM01 - Final Dissertation\\Development")
library(igraph, lib=".\\library")
library(Rcpp, lib=".\\library")
library(expm, lib=".\\library")
library(MCL, lib=".\\library")
library(dynamicTreeCut, lib=".\\library")
library(RColorBrewer, lib=".\\library")
library(ProNet, lib=".\\library")
library(linkcomm, lib=".\\library")
library(linkcomm, lib=".\\library")
library(ProNet, lib=".\\library")
# Created by Suthinan Rujirapipat, 7 December 2015
# As part of master project @ University of Sunderland, Information Technology Management
setwd("E:\\Sunderland\\PROM01 - Final Dissertation\\Development")
library(igraph, lib=".\\library")
library(Rcpp, lib=".\\library")
library(expm, lib=".\\library")
library(MCL, lib=".\\library")
library(dynamicTreeCut, lib=".\\library")
library(RColorBrewer, lib=".\\library")
library(linkcomm, lib=".\\library")
library(ProNet, lib=".\\library")
# http://string-db.org/api/psi-mi-tab/interactionsList?identifiers=APP&limit=10000&required_score=900
APP <- read.table(file = ".\\data\\APPPSIMI.csv", header = FALSE)
APP <- APP[,c("V3","V4")]
APP[,1] = toupper(APP[,1])
APP[,2] = toupper(APP[,2])
APP <- unique(APP)
g <- graph.data.frame(APP, directed=FALSE) # For MCODE
g2 <- graph.data.frame(APP, directed=FALSE) # For MCL
setwd(".\\output")
#======================= MCODE generation and visualisation =======================
# MCODE network clustering
# graph	<- An igraph object.
# vwp	  <-Vertex weight percentage. Default value is 0.5.
# haircut <-	Boolean value, whether to remove singly-connected nodes from clusters (TRUE) or not (FALSE).
# fluff	<- Boolean value, whether to spand cluster cores by one neighbour shell outwards (TRUE) or not (FALSE).
# fdt	  <- Cluster density cutoff. Default value is 0.8.
# loops	<-  Boolean value, whether to include self-loops (TRUE) or not (FALSE).
mcg <- mcode(g, vwp=0.0, loops = FALSE, haircut= TRUE, fluff = FALSE, fdt= 0.2)
# Create and visualise of induced subgraphs (clusters), just in case
#
# cluster1 <- induced.subgraph(g, mcg$COMPLEX[[1]])
# writeClipboard(V(cluster1)$name)
#
# visualization(cluster1,
#               node.size=4,
#               node.label=V(cluster1)$name,
#               node.label.color="blue",
#               edge.color="gray",
#               edge.width=0.1,
#               node.fill.color = "red")
#
summary(mcg$COMPLEX)
index <- which(!is.na(mcg$score))
membership <- rep(0, vcount(g))
for (i in 1:length(index)) {
membership[mcg$COMPLEX[[index[i]]]] <- i
}
# names(membership) <- V(g)$name
# Find top 5 largest clusters; This will ignore community overlapping nodes using first in first out assignment
sort(table(unlist(membership)), decreasing = TRUE)[1:5]
color <- "white" # Initialised
color[membership == 1] <- "red"
color[membership == 2] <- "pink"
color[membership == 0] <- "aquamarine"
color[membership == 3] <- "yellow"
color[membership == 4] <- "magenta"
# Create network graph of the result
png(file=paste(format(Sys.time(),"%H-%M-%S"),"MCODE", "png", sep = "."),height=1500, width=1500, bg="white")
visualization(graph = g,
layout="kamada.kawai",
node.size=4,
node.label.color="blue",
edge.color = "gray",
edge.width=0.1,
node.fill.color = color)
# node.fill.color = list(heat.colors(5)))
title(main = "Molecular Complex Detection Algorithm (MCODE)", cex.main = 4)
legend("bottomright", legend = c('color[membership == 1] <- "red"', 'color[membership == 2] <- "pink"',
'color[membership == 4] <- "aquamarine"', 'color[membership == 5] <- "yellow"',
'color[membership == 9] <- "magenta"'), pch = 1, title = "Cluster Size")
dev.off()
#======================= MCL generation and visualisation ==================================
# Convert igraph graph object to adjacency matrix
adj <- matrix(rep(0, length(V(g2))^2), nrow = length(V(g2)), ncol = length(V(g2)))
for (i in 1:length(V(g2))) {
neighbors <- neighbors(g2, v = V(g2)$name[i], mode = "all")
j <- match(neighbors$name, V(g2)$name, nomatch = 0)
adj[i, j] = 1
}
# Clear temporary variables
rm(i)
rm(j)
rm(neighbors)
# Markov Cluster Algorithm
# x	<- an adjacency or (n x n) matrix
# addLoops	<-logical; if TRUE, self-loops with weight 1 are added to each vertex of x (see Details).
# expansion	<- numeric value > 1 for the expansion parameter
# inflation	<- numeric value > 0 for the inflation power coefficient
# allow1	<- logical; if TRUE, vertices are allowed to form their own cluster.
# If FALSE, clusters of size 1 are interpreted as background noise and grouped in one cluster.
# max.iter	<- an interger, the maximum number of iterations for the MCL
# ESM	<- logical whether the equilibrium state matrix should be returned (default is FALSE)
lc <- mcl(adj, addLoops = TRUE, inflation = 1.8, allow1 = TRUE, ESM = FALSE)
# Check MCL complexes' size
lc
# Find top 5 largest clusters
sort(table(unlist(lc$Cluster)), decreasing = TRUE)[1:5]
# lc$name <- V(g2)$name
# lc$Cluster <- lc$Cluster
# lc$name[lc$Cluster == 2]
# Assign color according to the top 5
color2 <- "white" # Initialised
color2[lc$Cluster == 3] <- "red"
color2[lc$Cluster == 1] <- "pink"
color2[lc$Cluster == 5] <- "aquamarine"
color2[lc$Cluster == 6] <- "yellow"
color2[lc$Cluster == 7] <- "magenta"
# Create network graph of the result
png(file=paste(format(Sys.time(),"%H-%M-%S"),"MCL", "png", sep = "."),height=1500, width=1500, bg="white")
visualization(graph = g2,
layout="kamada.kawai",
node.size=4,
node.label.color="blue",
edge.color = "gray",
edge.width=0.1,
node.fill.color = color2)
title(main = "Markov Clustering (MCL)", cex.main = 4)
legend("bottomright", legend = c('color[membership == 3] <- "red"', 'color[membership == 1] <- "pink"',
'color[membership == 5] <- "aquamarine"', 'color[membership == 6] <- "yellow"',
'color[membership == 7] <- "magenta"'), pch = 1, title = "Cluster Size")
dev.off()
# generateMCL function, used To find the induced subgraph
# generateMCL <- function (x, colorx) {
#
#   mclCluster <- induced.subgraph(g2, lc$Cluster == x)
#
#   visualization(graph = mclCluster,
#                 layout="fruchterman.reingold",
#                 node.size=8,
#                 node.label=V(mclCluster)$name,
#                 node.label.color="blue",
#                 edge.color = "gray",
#                 edge.width=0.1,
#                 node.fill.color = colorx)
# }
#
# generateMCL(2,"yellow")
lc$name <- V(g2)$name
lc$name[lc$Cluster == 2]
sort(table(unlist(lc$Cluster)), decreasing = TRUE)[1:5]
lc$name[lc$Cluster == 3]
writeClipboard(lc$name[lc$Cluster == 3])
writeClipboard(lc$name[lc$Cluster == 3])
V(lc$Cluster)
lc$Cluster
lc$name
lc$name[lc$Cluster == 3]
length(lc$name[lc$Cluster == 3])
length(lc$name[lc$Cluster == 1])
length(lc$name[lc$Cluster == 5])
length(lc$name[lc$Cluster == 6])
length(lc$name[lc$Cluster == 7])
sort(table(unlist(lc$Cluster)), decreasing = TRUE)[1:5]
writeClipboard(lc$name[lc$Cluster == 1])
writeClipboard(lc$name[lc$Cluster == 5])
writeClipboard(lc$name[lc$Cluster == 6])
writeClipboard(lc$name[lc$Cluster == 7])
sort(table(unlist(membership)), decreasing = TRUE)[1:5]
mcg$COMPLEX
membership
membership$name <- V(g)$name
membership
membership == 1
color[membership == 1]
membership <- rep(0, vcount(g))
for (i in 1:length(index)) {
membership[mcg$COMPLEX[[index[i]]]] <- i
}
names(membership) <- V(g)$name
membership$name[membership == 3]
membership
names(membership)
names(membership)[membership == 3]
sort(table(unlist(membership)), decreasing = TRUE)[1:5]
writeClipboard(names(membership)[membership == 1])
names(membership)[membership == 1]
sort(table(unlist(membership)), decreasing = TRUE)[1:5]
writeClipboard(names(membership)[membership == 2])
writeClipboard(names(membership)[membership == 0])
writeClipboard(names(membership)[membership == 3])
writeClipboard(names(membership)[membership == 4])
summary(mcg$COMPLEX)
transitivity(mcg$COMPLEX[[1]])
mcg$COMPLEX[[1]]
transitivity(induced.subgraph(g, mcg$COMPLEX[[1]]))
summary(mcg$COMPLEX)
transitivity(induced.subgraph(g, mcg$COMPLEX[[2]]))
plot(induced.subgraph(g, mcg$COMPLEX[[1]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[1]]), type="local")
test <- induced.subgraph(g, mcg$COMPLEX[[1]])
transitivity(test, type="local")
g <- make_ring(10)
transitivity(g)
transitivity(test, type="global")
transitivity(induced.subgraph(g, mcg$COMPLEX[[1]]), type="global")
local
transitivity(induced.subgraph(g, mcg$COMPLEX[[1]]))
summary(mcg$COMPLEX)
induced.subgraph(g, mcg$COMPLEX[[1]]
)
mcg <- mcode(g, vwp=0.0, loops = FALSE, haircut= TRUE, fluff = FALSE, fdt= 0.2)
summary(mcg$COMPLEX)
g <- graph.data.frame(APP, directed=FALSE) # For MCODE
mcg <- mcode(g, vwp=0.0, loops = FALSE, haircut= TRUE, fluff = FALSE, fdt= 0.2)
summary(mcg$COMPLEX)
transitivity(induced.subgraph(g, mcg$COMPLEX[[1]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[2]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[3]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[4]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[5]]))
sort(table(unlist(membership)), decreasing = TRUE)[1:5]
transitivity(induced.subgraph(g, mcg$COMPLEX[[1]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[0]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[2]]))
membership
summary(mcg$COMPLEX)
summary(membership)
sort(table(unlist(membership)), decreasing = TRUE)[1:5]
sort(table(unlist(membership)), decreasing = TRUE)[1:10]
table(unlist(membership)
)
index
membership <- rep(0, vcount(g))
membership
for (i in 1:length(index)) {
membership[mcg$COMPLEX[[index[i]]]] <- i
}
sort(table(unlist(membership)), decreasing = TRUE)[1:5]
sort(table(unlist(membership)), decreasing = TRUE)[1:5 && membership != 0]
sort(table(unlist(membership)), decreasing = TRUE)[membership == 1]
membership
sort(table(unlist(membership[membership != 0])), decreasing = TRUE)[1:5]
color <- "white" # Initialised
color[membership == 1] <- "red"
color[membership == 2] <- "pink"
color[membership == 3] <- "aquamarine"
color[membership == 4] <- "yellow"
color[membership == 5] <- "magenta"
png(file=paste(format(Sys.time(),"%H-%M-%S"),"MCODE", "png", sep = "."),height=1500, width=1500, bg="white")
visualization(graph = g,
layout="kamada.kawai",
node.size=4,
node.label.color="blue",
edge.color = "gray",
edge.width=0.1,
node.fill.color = color)
# node.fill.color = list(heat.colors(5)))
title(main = "Molecular Complex Detection Algorithm (MCODE)", cex.main = 4)
legend("bottomright", legend = c('color[membership == 1] <- "red"', 'color[membership == 2] <- "pink"',
'color[membership == 4] <- "aquamarine"', 'color[membership == 5] <- "yellow"',
'color[membership == 9] <- "magenta"'), pch = 1, title = "Cluster Size")
dev.off()
writeClipboard(names(membership)[membership == 3])
names(membership) <- V(g)$name
writeClipboard(names(membership)[membership == 3])
sort(table(unlist(membership[membership != 0])), decreasing = TRUE)[1:5]
names(membership)[membership == 3]
names(membership)[membership == 4]
names(membership)[membership == 5]
writeClipboard(names(membership)[membership == 5])
writeClipboard(names(membership)[membership == 5])
transitivity(induced.subgraph(g, mcg$COMPLEX[[1]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[2]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[3]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[4]]))
transitivity(induced.subgraph(g, mcg$COMPLEX[[5]]))
lc
sort(table(unlist(lc$Cluster)), decreasing = TRUE)[1:5]
lc
lc$Cluster
lc$Cluster == 1
sort(table(unlist(lc$Cluster)), decreasing = TRUE)[1:5]
transitivity(induced.subgraph(g2, lc$Cluster == 3))
induced.subgraph(g2, lc$Cluster == 3)
induced.subgraph(g2, lc$Cluster == 1)
sort(table(unlist(lc$Cluster)), decreasing = TRUE)[1:5]
transitivity(induced.subgraph(g2, lc$Cluster == 1))
transitivity(induced.subgraph(g2, lc$Cluster == 5))
transitivity(induced.subgraph(g2, lc$Cluster == 6))
transitivity(induced.subgraph(g2, lc$Cluster == 7))
transitivity(induced.subgraph(g2, lc$Cluster == 3))
lc
lc$Cluster
sort(table(unlist(lc$Cluster)), decreasing = TRUE)
transitivity(induced.subgraph(g2, lc$Cluster == 1))
transitivity(induced.subgraph(g2, lc$Cluster == 2))
transitivity(induced.subgraph(g2, lc$Cluster == 3))
induced.subgraph(g2, lc$Cluster == 2)
induced.subgraph(g2, lc$Cluster == 3)
induced.subgraph(g2, lc$Cluster == 2)
induced.subgraph(g2, lc$Cluster == 6)
transitivity(induced.subgraph(g2, lc$Cluster == 6))
sort(table(unlist(lc$Cluster)), decreasing = TRUE)[1:5]
transitivity(induced.subgraph(g2, lc$Cluster == 2))
transitivity(induced.subgraph(g2, lc$Cluster == 2), isolates = "zero"))
transitivity(induced.subgraph(g2, lc$Cluster == 2), isolates = "zero")
transitivity(induced.subgraph(g2, lc$Cluster == 3), isolates = "zero")
transitivity(induced.subgraph(g2, lc$Cluster == 4), isolates = "zero")
transitivity(induced.subgraph(g2, lc$Cluster == 5), isolates = "zero")
transitivity(induced.subgraph(g2, lc$Cluster == 6), isolates = "zero")
transitivity(induced.subgraph(g2, lc$Cluster == 7), isolates = "zero")
transitivity(induced.subgraph(g2, lc$Cluster == 8), isolates = "zero")
transitivity(induced.subgraph(g2, lc$Cluster == 9), isolates = "zero")
sort(table(unlist(lc$Cluster)), decreasing = TRUE)[1:5]
writeClipboard(lc$name[lc$Cluster == 3])
writeClipboard(lc$name[lc$Cluster == 1])
writeClipboard(lc$name[lc$Cluster == 5])
writeClipboard(lc$name[lc$Cluster == 6])
writeClipboard(lc$name[lc$Cluster == 7])
mcg$COMPLEX
sort(table(unlist(membership[membership != 0])), decreasing = TRUE)[1:5]
transitivity(induced.subgraph(g, mcg$COMPLEX[[1]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[2]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[3]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[4]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[5]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[6]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[7]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[8]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[9]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[10]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[11]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[12]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[13]]), isolates = "zero")
transitivity(induced.subgraph(g, mcg$COMPLEX[[14]]), isolates = "zero")
sort(table(unlist(membership[membership != 0])), decreasing = TRUE)[1:5]
writeClipboard(names(membership)[membership == 1])
writeClipboard(names(membership)[membership == 2])
writeClipboard(names(membership)[membership == 3])
writeClipboard(names(membership)[membership == 4])
writeClipboard(names(membership)[membership == 4])
writeClipboard(names(membership)[membership == 5])
